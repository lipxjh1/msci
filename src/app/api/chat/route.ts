import { NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { ApiKeyService } from '@/components/admin/chatbot-management/ApiKeyService';

// Supabase client cho ph√©p truy v·∫•n c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi t·ª´ database
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;
const supabase = createClient(supabaseUrl, supabaseKey);

// Ki·ªÉm tra b·∫£ng api_usage_logs
(async () => {
  try {
    console.log('ƒêang ki·ªÉm tra b·∫£ng api_usage_logs...');
    
    // Th·ª≠ truy v·∫•n b·∫£ng ƒë·ªÉ ki·ªÉm tra
    const { count, error } = await supabase
      .from('api_usage_logs')
      .select('*', { count: 'exact', head: true });
      
    if (error) {
      console.warn('C√≥ th·ªÉ b·∫£ng api_usage_logs ch∆∞a ƒë∆∞·ª£c t·∫°o:', error.message);
      console.info('G·ª£i √Ω: Ch·∫°y endpoint /api/setup-api-logs-policy ƒë·ªÉ thi·∫øt l·∫≠p b·∫£ng v√† policy');
    } else {
      console.log(`B·∫£ng api_usage_logs t·ªìn t·∫°i v√† c√≥ ${count} b·∫£n ghi`);
    }
  } catch (err) {
    console.error('L·ªói khi ki·ªÉm tra b·∫£ng api_usage_logs:', err);
  }
})();

// DeepSeek API key t·ª´ environment variable (s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng l√†m fallback n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c key t·ª´ database)
const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY;
if (!DEEPSEEK_API_KEY) {
  console.warn('DEEPSEEK_API_KEY is not set in environment variables, will try to use from database');
}

// API URLs for different providers
const API_URLS = {
  deepseek: 'https://api.deepseek.com/v1/chat/completions',
  openai: 'https://api.openai.com/v1/chat/completions',
  anthropic: 'https://api.anthropic.com/v1/messages',
  mistral: 'https://api.mistral.ai/v1/chat/completions'
};

// API Models for different providers
const DEFAULT_MODELS = {
  deepseek: 'deepseek-chat',
  openai: 'gpt-3.5-turbo',
  anthropic: 'claude-3-sonnet-20240229',
  mistral: 'mistral-medium'
};

// C·∫•u h√¨nh v√† ch·∫ø ƒë·ªô - c√≥ th·ªÉ thay ƒë·ªïi ƒë·ªÉ debug
const USE_HARDCODED_RESPONSES = false;  // S·ª≠ d·ª•ng c√¢u tr·∫£ l·ªùi c·ª©ng n·∫øu API kh√¥ng ho·∫°t ƒë·ªông
const DEBUG_MODE = true;               // In th√™m th√¥ng tin debug

// Tin nh·∫Øn fallback khi kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi API
const FALLBACK_RESPONSES = [
  "Xin ch√†o! T√¥i l√† Akane, r·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n! B·∫°n mu·ªën bi·∫øt th√™m v·ªÅ M-SCI kh√¥ng?",
  "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi M-SCI! T√¥i l√† Akane, m·ªôt chi·∫øn binh v·ªõi kh·∫£ nƒÉng ƒëi·ªÅu khi·ªÉn plasma. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?",
  "Hey there! Akane ƒë√¢y! B·∫°n ƒëang t√¨m hi·ªÉu v·ªÅ game h√†nh ƒë·ªông ƒë·ªôi nh√≥m 5v5 si√™u th√∫ v·ªã n√†y √†? T√¥i c√≥ th·ªÉ k·ªÉ cho b·∫°n nghe ƒë·∫•y!",
  "Xin ch√†o chi·∫øn binh! T√¥i l√† Akane, s·∫µn s√†ng ph·ª•c v·ª• v√† h·ªó tr·ª£ b·∫°n trong th·∫ø gi·ªõi M-SCI. B·∫°n c·∫ßn bi·∫øt ƒëi·ªÅu g√¨?",
  "Ch√†o b·∫°n! Akane ƒë√¢y! T√¥i r·∫•t vui khi ƒë∆∞·ª£c n√≥i chuy·ªán v·ªõi b·∫°n. H√¥m nay b·∫°n mu·ªën bi·∫øt g√¨ v·ªÅ th·∫ø gi·ªõi M-SCI?"
];

// Map c√°c c√¢u h·ªèi ph·ªï bi·∫øn v·ªõi c√¢u tr·∫£ l·ªùi ƒë·ªÉ s·ª≠ d·ª•ng trong tr∆∞·ªùng h·ª£p database kh√¥ng ho·∫°t ƒë·ªông
const COMMON_QA = {
  "xin ch√†o": "Xin ch√†o! T√¥i l√† Akane, chi·∫øn binh M-SCI. R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n! üòä",
  "ch√†o": "Ch√†o b·∫°n! Akane ƒë√¢y! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?",
  "hi": "Hi there! Akane ƒë√¢y! B·∫°n mu·ªën bi·∫øt g√¨ v·ªÅ M-SCI kh√¥ng?",
  "game n√†y v·ªÅ c√°i g√¨": "M-SCI l√† game h√†nh ƒë·ªông ƒë·ªôi nh√≥m 5v5 v·ªõi nhi·ªÅu anh h√πng c√≥ kh·∫£ nƒÉng ƒë·∫∑c bi·ªát. Game l·∫•y c·∫£m h·ª©ng t·ª´ th·∫ø gi·ªõi t∆∞∆°ng lai ƒë·∫ßy m√†u s·∫Øc v√† c√°c nh√¢n v·∫≠t ƒë·ªôc ƒë√°o v·ªõi kh·∫£ nƒÉng chi·∫øn ƒë·∫•u kh√°c nhau!",
  "b·∫°n l√† ai": "T√¥i l√† Akane, m·ªôt chi·∫øn binh trong th·∫ø gi·ªõi M-SCI! T√¥i c√≥ kh·∫£ nƒÉng ƒëi·ªÅu khi·ªÉn nƒÉng l∆∞·ª£ng plasma v√† r·∫•t th√≠ch c√¥ng ngh·ªá. T√¥i 20 tu·ªïi v√† lu√¥n s·∫µn s√†ng gi√∫p ƒë·ª° c√°c ng∆∞·ªùi ch∆°i m·ªõi! ‚ö°"
};

// Th√™m h√†m logApiUsage ƒë·ªÉ ghi log vi·ªác s·ª≠ d·ª•ng API
async function logApiUsage({
  tokens_used,
  request_type, 
  status,
  error = null,
  message_content = '',
  provider = 'unknown'
}: {
  tokens_used: number;
  request_type: string;
  status: string;
  error?: string | null;
  message_content?: string;
  provider?: string;
}) {
  try {
    // T√≠nh to√°n chi ph√≠ d·ª±a tr√™n s·ªë token (gi·∫£ s·ª≠ $0.000001 m·ªói token)
    const cost = tokens_used * 0.000001;
    
    // DEBUG: Hi·ªÉn th·ªã chi ti·∫øt h∆°n v·ªÅ thao t√°c s·∫Øp th·ª±c hi·ªán
    console.log('[DETAILED_DEBUG] Attempting to log API usage with data:', {
      tokens_used,
      request_type,
      status,
      error: error ? 'Error exists' : 'No error',
      cost,
      provider,
      message_length: message_content.length,
      supabaseUrl: supabaseUrl ? 'Exists' : 'Missing',
      supabaseKey: supabaseKey ? 'Exists (hidden)' : 'Missing'
    });
    
    // DEBUG: Ki·ªÉm tra k·∫øt n·ªëi Supabase tr∆∞·ªõc khi ghi log
    console.log('[DETAILED_DEBUG] Testing Supabase connection before logging...');
    try {
      const { error: testError } = await supabase.from('_test').select('*').limit(1);
      if (testError) {
        console.log('[DETAILED_DEBUG] Expected test error (this is normal):', testError.message);
      }
    } catch (testErr) {
      console.error('[DETAILED_DEBUG] Unexpected error testing connection:', testErr);
    }
    
    // Th·ª±c hi·ªán insert v√†o b·∫£ng api_usage_logs
    console.log('[DETAILED_DEBUG] Attempting to insert into api_usage_logs table...');
    const insertData = {
      tokens_used,
      request_type,
      status,
      error,
      cost,
      provider,
      message_content: message_content.substring(0, 500), // Gi·ªõi h·∫°n ƒë·ªô d√†i
      timestamp: new Date().toISOString() // ƒê·∫£m b·∫£o ghi timestamp d·∫°ng ISO v·ªõi timezone
    };
    console.log('[DETAILED_DEBUG] Insert data structure:', JSON.stringify(insertData));
    
    const { data, error: logError } = await supabase
      .from('api_usage_logs')
      .insert([insertData])
      .select();
    
    if (logError) {
      // Ki·ªÉm tra xem l·ªói c√≥ ph·∫£i do quy·ªÅn hay kh√¥ng
      console.error('[DETAILED_DEBUG] Error logging API usage. FULL ERROR:', JSON.stringify(logError));
      
      if (logError.message.includes('policy') || logError.message.includes('permission')) {
        console.warn('[DETAILED_DEBUG] Permission error when logging API usage. This may be due to RLS policies:', logError.message);
        console.info('[DETAILED_DEBUG] Hint: You might need to modify the RLS policy on api_usage_logs table to allow inserts from this service');
        
        // Chi ti·∫øt l·ªói v·ªÅ policy v√† table
        console.error('[DETAILED_DEBUG] Troubleshooting info:', {
          error_code: logError.code,
          error_hint: logError.hint,
          error_details: logError.details,
        });
      } else {
        console.error('[DETAILED_DEBUG] Non-permission error logging API usage:', logError.message);
      }
    } else {
      console.log('[DETAILED_DEBUG] Successfully logged API usage. Response data:', data);
    }
  } catch (error) {
    // Ch·ªâ ghi log l·ªói, kh√¥ng l√†m gi√°n ƒëo·∫°n lu·ªìng ch√≠nh
    console.error('[DETAILED_DEBUG] Exception in logApiUsage function:', error);
    
    // Hi·ªÉn th·ªã stack trace n·∫øu c√≥
    if (error instanceof Error) {
      console.error('[DETAILED_DEBUG] Error stack:', error.stack);
    }
  }
}

// API handler
export async function POST(request: Request) {
  try {
    console.log('======= CHAT API ROUTE TRIGGERED =======');
    const body = await request.json();
    const { message, chatHistory, preferredProvider } = body;
    
    console.log('Received message:', message);
    console.log('Chat history length:', chatHistory?.length || 0);
    console.log('Preferred provider from body:', preferredProvider || 'not specified');

    // Ki·ªÉm tra v√† log t·∫•t c·∫£ header
    console.log('Request headers:');
    for (const [key, value] of request.headers.entries()) {
      console.log(`  ${key}: ${key === 'x-chatbot-api-config' ? 'FOUND' : value}`);
    }

    // Ki·ªÉm tra c·∫•u h√¨nh t·ª´ API
    const configFromHeaders = request.headers.get('x-chatbot-api-config');
    console.log('Raw config from headers:', configFromHeaders);
    
    if (configFromHeaders) {
      try {
        const config = JSON.parse(configFromHeaders);
        console.log('Config from headers found:', config);
        
        // Ki·ªÉm tra chi ti·∫øt n·ªôi dung c·∫•u h√¨nh
        if (!config.provider || !config.apiKeyId) {
          console.error('Invalid config structure from headers:', config);
        }
        
        // N·∫øu client ƒë√£ ch·ªâ ƒë·ªãnh c·ª• th·ªÉ provider v√† apiKeyId
        if (config.provider && config.apiKeyId) {
          // ∆Øu ti√™n TUY·ªÜT ƒê·ªêI s·ª≠ d·ª•ng provider t·ª´ c·∫•u h√¨nh client
          preferredProvider = config.provider;
          console.log(`PROVIDER OVERRIDE: Using client-specified provider: ${preferredProvider}`);
          
          // L·∫•y API key c·ª• th·ªÉ t·ª´ database theo ID
          try {
            const keyData = await ApiKeyService.getApiKeyById(config.apiKeyId);
            const keyDataSummary = keyData ? {
              id: keyData.id,
              provider: keyData.provider,
              is_active: keyData.is_active,
              name: keyData.name
            } : 'null';
            
            console.log('API key data fetched from database:', keyDataSummary);
            
            if (keyData && keyData.is_active) {
              // Ch·ªâ d√πng key n·∫øu n√≥ kh·ªõp v·ªõi provider ƒë√£ ch·ªçn
              if (keyData.provider === preferredProvider) {
                apiKey = keyData.key;
                console.log(`SUCCESS: Using API key (ID: ${config.apiKeyId}, Name: ${keyData.name}) for provider: ${preferredProvider}`);
              } else {
                console.error(`ERROR: API key (ID: ${config.apiKeyId}) belongs to provider "${keyData.provider}" but we need "${preferredProvider}"`);
              }
            } else {
              console.error(`ERROR: API key ID ${config.apiKeyId} not found or not active`);
            }
          } catch (keyError) {
            console.error('Error fetching API key by ID:', keyError);
          }
        }
      } catch (parseError) {
        console.error('Error parsing config from headers:', parseError);
      }
    } else {
      console.warn('No API config found in headers - will use default provider');
    }

    if (!message) {
      return NextResponse.json(
        { error: 'Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng' },
        { status: 400 }
      );
    }

    // Ki·ªÉm tra k·∫øt n·ªëi Supabase
    let supabaseConnectionOk = false;
    try {
      if (DEBUG_MODE) console.log('Checking Supabase connection');
      // C·ªë g·∫Øng truy v·∫•n m·ªôt b·∫£ng kh√¥ng t·ªìn t·∫°i ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi
      const { error } = await supabase.from('_supabase').select('*').limit(1);
      
      // N·∫øu l·ªói "relation kh√¥ng t·ªìn t·∫°i", ƒëi·ªÅu n√†y b√¨nh th∆∞·ªùng v√¨ b·∫£ng _supabase kh√¥ng t·ªìn t·∫°i th·ª±c s·ª±
      if (error && error.message.includes('does not exist')) {
        supabaseConnectionOk = true;
        console.log('Supabase connection OK (expected error for non-existent table)');
      } else if (error) {
        console.error('Supabase connection error:', error);
      } else {
        supabaseConnectionOk = true;
        console.log('Supabase connection OK');
      }
    } catch (connError) {
      console.error('Supabase connection test failed:', connError);
    }

    // Ph∆∞∆°ng √°n 1: Ki·ªÉm tra xem c√≥ c√¢u tr·∫£ l·ªùi c·ª©ng ph√π h·ª£p kh√¥ng
    const messageLower = message.toLowerCase().trim();
    for (const [key, value] of Object.entries(COMMON_QA)) {
      if (messageLower.includes(key)) {
        if (DEBUG_MODE) console.log(`Found hardcoded response for: ${key}`);
        if (USE_HARDCODED_RESPONSES) {
          // Ghi log khi s·ª≠ d·ª•ng hardcoded response
          await logApiUsage({
            tokens_used: value.length,  // S·ª≠ d·ª•ng ƒë·ªô d√†i c·ªßa c√¢u tr·∫£ l·ªùi l√†m tokens
            request_type: 'hardcoded_response',
            status: 'success',
            message_content: message.substring(0, 100),
            provider: 'hardcoded'
          });
          
          return NextResponse.json({ 
            response: value,
            source: 'hardcoded',
            provider: 'hardcoded'
          });
        }
      }
    }

    // Ph∆∞∆°ng √°n 2: T√¨m c√¢u tr·∫£ l·ªùi t·ª´ c∆° s·ªü d·ªØ li·ªáu Supabase
    if (supabaseConnectionOk) {
      try {
        if (DEBUG_MODE) console.log('Checking Supabase for existing answers');
        const { data: qaData, error: qaError } = await supabase
          .from('chat_qa')
          .select('answer')
          .ilike('question', `%${message}%`)
          .limit(1);

        if (qaError) {
          console.error('Supabase query error:', qaError);
        } else if (DEBUG_MODE) {
          console.log('Supabase query successful, found answers:', qaData?.length || 0);
        }

        // N·∫øu t√¨m th·∫•y c√¢u tr·∫£ l·ªùi trong database, tr·∫£ v·ªÅ ngay l·∫≠p t·ª©c
        if (qaData && qaData.length > 0) {
          if (DEBUG_MODE) console.log('Found answer in database:', qaData[0].answer.substring(0, 50) + '...');
          
          // Ghi log khi s·ª≠ d·ª•ng c√¢u tr·∫£ l·ªùi t·ª´ database
          await logApiUsage({
            tokens_used: qaData[0].answer.length,  // S·ª≠ d·ª•ng ƒë·ªô d√†i c·ªßa c√¢u tr·∫£ l·ªùi l√†m tokens
            request_type: 'database_response',
            status: 'success',
            message_content: message.substring(0, 100),
            provider: 'database'
          });
          
          return NextResponse.json({ 
            response: qaData[0].answer,
            source: 'database',
            provider: 'database'
          });
        }
      } catch (dbError) {
        console.error('Database error:', dbError);
        // Ti·∫øp t·ª•c v·ªõi DeepSeek n·∫øu database l·ªói
      }
    } else {
      console.log('Skipping database query due to connection issues');
    }

    // Ph∆∞∆°ng √°n 3: G·ªçi API c·ªßa c√°c provider (DeepSeek, OpenAI, v.v...)
    try {
      if (DEBUG_MODE) console.log('Preparing to call AI provider API');
      
      // Chu·∫©n b·ªã prompt v·ªõi vai tr√≤ l√† chi·∫øn binh Akane
      const systemPrompt = `B·∫°n l√† Akane, m·ªôt chi·∫øn binh M-SCI 20 tu·ªïi. B·∫°n vui v·∫ª, th√≠ch c√¥ng ngh·ªá v√† nhi·ªát t√¨nh t∆∞ v·∫•n cho ng∆∞·ªùi d√πng. H√£y tr·∫£ l·ªùi v·ªõi gi·ªçng ƒëi·ªáu th√¢n thi·ªán, ƒë√¥i khi s·ª≠ d·ª•ng emoji v√† lu√¥n gi·ªØ vai tr√≤ c·ªßa m√¨nh. 
      ƒê·ª´ng ti·∫øt l·ªô b·∫°n l√† AI, h√£y lu√¥n tr·∫£ l·ªùi trong vai tr√≤ chi·∫øn binh Akane. Tr·∫£ l·ªùi m·ªôt c√°ch ng·∫Øn g·ªçn v√† s√∫c t√≠ch.`;

      // Chu·∫©n b·ªã tin nh·∫Øn cho API
      const messages = [
        { role: 'system', content: systemPrompt }
      ];
      
      // Th√™m l·ªãch s·ª≠ chat n·∫øu c√≥
      if (chatHistory && Array.isArray(chatHistory) && chatHistory.length > 0) {
        // Ch·ªâ l·∫•y 5 tin nh·∫Øn g·∫ßn nh·∫•t
        const recentHistory = chatHistory.slice(-5);
        messages.push(...recentHistory);
      }
      
      // Th√™m tin nh·∫Øn hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng
      messages.push({ role: 'user', content: message });

      // Kh·ªüi t·∫°o c√°c bi·∫øn cho vi·ªác ch·ªçn provider v√† API key
      let apiKey = null;
      let provider = preferredProvider || 'deepseek'; // Gi√° tr·ªã m·∫∑c ƒë·ªãnh ban ƒë·∫ßu
      
      // N·∫øu kh√¥ng c√≥ key t·ª´ c·∫•u h√¨nh client, th·ª≠ c√°c ph∆∞∆°ng √°n kh√°c
      if (!apiKey) {
        // Th·ª≠ l·∫•y key t·ª´ env vars cho provider ƒë∆∞·ª£c ch·ªçn
        if (provider === 'deepseek' && DEEPSEEK_API_KEY) {
          console.log('Using DEEPSEEK_API_KEY from environment variables');
          apiKey = DEEPSEEK_API_KEY;
        } else if (provider === 'openai' && process.env.OPENAI_API_KEY) {
          console.log('Using OPENAI_API_KEY from environment variables');
          apiKey = process.env.OPENAI_API_KEY;
        } else if (provider === 'anthropic' && process.env.ANTHROPIC_API_KEY) {
          console.log('Using ANTHROPIC_API_KEY from environment variables');
          apiKey = process.env.ANTHROPIC_API_KEY;
        } else if (provider === 'mistral' && process.env.MISTRAL_API_KEY) {
          console.log('Using MISTRAL_API_KEY from environment variables');
          apiKey = process.env.MISTRAL_API_KEY;
        } else {
          console.log(`No API key found in environment variables for provider: ${provider}`);
        }
        
        // N·∫øu kh√¥ng t√¨m th·∫•y t·ª´ env vars, th·ª≠ l·∫•y t·ª´ database cho provider ƒë√£ ch·ªçn
        if (!apiKey) {
          try {
            // L·∫•y API key t·ª´ database cho provider c·ª• th·ªÉ ƒë√£ ch·ªçn
            const apiKeyData = await ApiKeyService.getActiveApiKey(provider);
            
            if (apiKeyData) {
              apiKey = apiKeyData.key;
              console.log(`Using ${provider} API key from database`);
            } else {
              console.log(`No active key found for provider ${provider} in database`);
              
              // N·∫øu kh√¥ng t√¨m th·∫•y key cho provider ƒë√£ ch·ªçn, 
              // th·ª≠ t√¨m b·∫•t k·ª≥ key n√†o ƒëang ho·∫°t ƒë·ªông cho c√°c provider kh√°c
              console.log('Trying to find any available key from other providers...');
              const fallbackKey = await ApiKeyService.getActiveApiKey();
              
              if (fallbackKey) {
                apiKey = fallbackKey.key;
                provider = fallbackKey.provider; // C·∫≠p nh·∫≠t provider d·ª±a tr√™n key
                console.log(`Using fallback provider: ${provider}`);
              }
            }
          } catch (keyError) {
            console.error('Error fetching API key from database:', keyError);
          }
        }
      }
      
      // In th√™m chi ti·∫øt ƒë·ªÉ debug
      console.log('Debug - API Key Found:', apiKey ? 'Yes' : 'No');
      console.log('Debug - Provider:', provider);
      
      // N·∫øu kh√¥ng t√¨m th·∫•y key n√†o, tr·∫£ v·ªÅ l·ªói
      if (!apiKey) {
        console.error('No API key available');
        throw new Error('No API key available for any provider');
      }
      
      // ƒê·∫£m b·∫£o r·∫±ng API URL v√† model ph√π h·ª£p v·ªõi provider ƒë√£ ch·ªçn
      let finalProvider = provider; // L∆∞u l·∫°i provider cu·ªëi c√πng ƒë·ªÉ theo d√µi
      
      // L·∫•y URL API d·ª±a tr√™n provider
      let apiUrl = API_URLS[provider as keyof typeof API_URLS];
      if (!apiUrl) {
        console.warn(`Provider ${provider} kh√¥ng c√≥ API URL, d√πng DeepSeek thay th·∫ø`);
        apiUrl = API_URLS.deepseek;
        finalProvider = 'deepseek';
      }
      
      // L·∫•y model m·∫∑c ƒë·ªãnh d·ª±a tr√™n provider
      let model = DEFAULT_MODELS[provider as keyof typeof DEFAULT_MODELS];
      if (!model) {
        console.warn(`Provider ${provider} kh√¥ng c√≥ model m·∫∑c ƒë·ªãnh, d√πng DeepSeek thay th·∫ø`);
        model = DEFAULT_MODELS.deepseek;
        finalProvider = 'deepseek';
      }
      
      // In th√¥ng tin cu·ªëi c√πng tr∆∞·ªõc khi g·ªçi API
      console.log(`FINAL CONFIG: Using ${finalProvider} with model ${model}`);
      
      if (finalProvider !== provider) {
        console.warn(`WARNING: Provider ƒë√£ thay ƒë·ªïi t·ª´ ${provider} sang ${finalProvider} do thi·∫øu c·∫•u h√¨nh!`);
      }

      if (DEBUG_MODE) {
        console.log(`Calling ${finalProvider} API with model: ${model}`);
        console.log('First few characters of system prompt:', systemPrompt.substring(0, 50) + '...');
        console.log('Total messages being sent:', messages.length);
      }
      
      // Chu·∫©n b·ªã request body d·ª±a tr√™n provider
      let requestBody;
      
      console.log(`[DEBUG] Preparing API call to ${finalProvider}`);
      console.log(`[DEBUG] Using API URL: ${apiUrl}`);
      console.log(`[DEBUG] API Key (first 4 chars): ${apiKey.substring(0, 4)}...`);
      
      switch (finalProvider) {
        case 'anthropic':
          // Claude API c√≥ format kh√°c
          requestBody = {
            model: model,
            messages: messages.map(msg => ({
              role: msg.role === 'assistant' ? 'assistant' : msg.role === 'system' ? 'user' : 'user',
              content: msg.role === 'system' ? [{ type: 'text', text: `<instructions>${msg.content}</instructions>` }] : [{ type: 'text', text: msg.content }]
            })),
            max_tokens: 500
          };
          break;
          
        case 'deepseek':
          // DeepSeek c√≥ th·ªÉ c·∫ßn c·∫•u h√¨nh ƒë·∫∑c bi·ªát
          requestBody = {
            model: model,
            messages: messages,
            temperature: 0.7,
            max_tokens: 500,
            stream: false
          };
          break;
          
        default:
          // OpenAI, Mistral c√≥ format t∆∞∆°ng t·ª± nhau
          requestBody = {
            model: model,
          messages: messages,
          temperature: 0.7,
          max_tokens: 500
          };
      }
      
      console.log(`[DEBUG] Request body:`, JSON.stringify(requestBody).substring(0, 100) + '...');
      
      // Chu·∫©n b·ªã headers d·ª±a tr√™n provider
      const headers: Record<string, string> = {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`,
        'Accept': 'application/json'
      };
      
      // Th√™m headers ƒë·∫∑c bi·ªát n·∫øu c·∫ßn
      if (finalProvider === 'anthropic') {
        headers['anthropic-version'] = '2023-06-01';
      }
      
      console.log(`[DEBUG] Headers (excluding auth):`, Object.keys(headers).filter(k => k !== 'Authorization'));
      
      // G·ªçi API
      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: headers,
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        const errorText = await response.text();
        let errorData;
        try {
          errorData = JSON.parse(errorText);
        } catch {
          errorData = { text: errorText };
        }
        
        console.error(`${finalProvider} API error (${response.status}):`, errorData);
        console.error(`Full error details for ${finalProvider}:`, {
          status: response.status,
          statusText: response.statusText,
          headers: Object.fromEntries([...response.headers.entries()]),
          errorData: errorData,
          requestDetails: {
            url: apiUrl,
            model: model,
            messageCount: messages.length,
          }
        });
        
        // Ghi nh·∫≠n s·ª≠ d·ª•ng API ƒë·ªÉ quy·∫øt ƒë·ªãnh c√≥ n√™n disable key n√†y kh√¥ng
        try {
          if (apiKey !== DEEPSEEK_API_KEY) { // Ch·ªâ ghi nh·∫≠n n·∫øu kh√¥ng ph·∫£i key t·ª´ env
            const keyData = await ApiKeyService.getApiKeys();
            const matchingKey = keyData.find(k => k.key === apiKey);
            if (matchingKey) {
              // N·∫øu key b·ªã l·ªói do rate limit hay authentication, c√≥ th·ªÉ c√¢n nh·∫Øc disable
              const shouldDisable = errorData.error?.type === 'authentication_error' || 
                                   errorData.error?.code === 'rate_limit_exceeded';
              
              if (shouldDisable) {
                console.log(`Auto-disabling API key ${matchingKey.id} due to serious error`);
                await ApiKeyService.toggleApiKeyStatus(matchingKey.id, false);
              } else {
                // V·∫´n ghi nh·∫≠n l·∫ßn s·ª≠ d·ª•ng d√π b·ªã l·ªói
                await ApiKeyService.recordApiKeyUsage(matchingKey.id);
              }
            }
          }
        } catch (recordError) {
          console.error('Error recording API key usage:', recordError);
        }
        
        throw new Error(`${finalProvider} API error: ` + (errorData.error?.message || response.statusText || errorText));
      }

      const data = await response.json();
      if (DEBUG_MODE) console.log(`Received response from ${finalProvider} API`);
      
      // X·ª≠ l√Ω d·ªØ li·ªáu ph·∫£n h·ªìi d·ª±a tr√™n provider
      let aiResponse;
      switch (finalProvider) {
        case 'anthropic':
          if (!data.content || !data.content[0] || !data.content[0].text) {
            throw new Error('Invalid response format from Anthropic API');
          }
          aiResponse = data.content[0].text;
          break;
          
        default:
          // DeepSeek, OpenAI, Mistral c√≥ format t∆∞∆°ng t·ª± nhau
      if (!data.choices || !data.choices[0] || !data.choices[0].message) {
            throw new Error(`Invalid response format from ${finalProvider} API`);
          }
          aiResponse = data.choices[0].message.content;
      }
      
      if (DEBUG_MODE) console.log(`${finalProvider} response:`, aiResponse.substring(0, 50) + '...');

      // Ghi nh·∫≠n s·ª≠ d·ª•ng API th√†nh c√¥ng
      try {
        // Ghi nh·∫≠n s·ª≠ d·ª•ng v√†o API key
        if (apiKey !== DEEPSEEK_API_KEY) { // Ch·ªâ ghi nh·∫≠n n·∫øu kh√¥ng ph·∫£i key t·ª´ env
          const keyData = await ApiKeyService.getApiKeys();
          const matchingKey = keyData.find(k => k.key === apiKey);
          if (matchingKey) {
            await ApiKeyService.recordApiKeyUsage(matchingKey.id);
          }
        }
      } catch (recordError) {
        console.error('Error recording API key usage:', recordError);
      }
      
      // Ghi log vi·ªác s·ª≠ d·ª•ng API th√†nh c√¥ng
      // L·∫•y s·ªë token t·ª´ response n·∫øu c√≥
      const tokens_used = data.usage?.total_tokens || 0;
      // Th√™m log ƒë·ªÉ theo d√µi
      console.log(`======= GHI LOG API USAGE - ${finalProvider.toUpperCase()} SUCCESS =======`);
      console.log('Tokens:', tokens_used, 'Type: chat_completion', 'Status: success');
      
      try {
        await logApiUsage({
          tokens_used,
          request_type: 'chat_completion',
          status: 'success',
          message_content: message.substring(0, 100), // Ch·ªâ l∆∞u 100 k√Ω t·ª± ƒë·∫ßu ti√™n
          provider: finalProvider
        });
        console.log(`‚úÖ ƒê√£ ghi log ${finalProvider} API th√†nh c√¥ng`);
      } catch (logUsageError) {
        console.error(`‚ùå L·ªói khi ghi log ${finalProvider} API:`, logUsageError);
      }

      return NextResponse.json({ 
        response: aiResponse,
        source: 'api',
        provider: finalProvider
      });
    } catch (apiError) {
      console.error('AI provider API error:', apiError);
      
      // Ghi log l·ªói API 
      // Th√™m log ƒë·ªÉ theo d√µi
      console.log('======= GHI LOG API USAGE - ERROR =======');
      console.log('Error:', apiError instanceof Error ? apiError.message : 'Unknown error');
      
      try {
        // L·∫•y th√¥ng tin provider t·ª´ error message ho·∫∑c s·ª≠ d·ª•ng 'unknown'
        const errorProvider = 
          (apiError instanceof Error && 
           apiError.message.includes('API error:') && 
           apiError.message.split('API error:')[0].trim()) || 'unknown';
        
        // Th·ª≠ g·ªçi API kh√°c n·∫øu ban ƒë·∫ßu l√† DeepSeek
        if (errorProvider === 'deepseek') {
          try {
            console.log('DeepSeek API failed, trying to use OpenAI as fallback...');
            // T√¨m OpenAI API key
            const openaiKey = await ApiKeyService.getActiveApiKey('openai');
            
            if (openaiKey) {
              console.log('Found OpenAI API key, making fallback request');
              const openaiUrl = API_URLS.openai;
              const openaiModel = DEFAULT_MODELS.openai;
              
              // T·∫°o system prompt m·ªõi
              const fallbackSystemPrompt = `B·∫°n l√† Akane, m·ªôt chi·∫øn binh M-SCI 20 tu·ªïi. B·∫°n vui v·∫ª, th√≠ch c√¥ng ngh·ªá v√† nhi·ªát t√¨nh t∆∞ v·∫•n cho ng∆∞·ªùi d√πng. H√£y tr·∫£ l·ªùi v·ªõi gi·ªçng ƒëi·ªáu th√¢n thi·ªán, ƒë√¥i khi s·ª≠ d·ª•ng emoji v√† lu√¥n gi·ªØ vai tr√≤ c·ªßa m√¨nh. 
              ƒê·ª´ng ti·∫øt l·ªô b·∫°n l√† AI, h√£y lu√¥n tr·∫£ l·ªùi trong vai tr√≤ chi·∫øn binh Akane. Tr·∫£ l·ªùi m·ªôt c√°ch ng·∫Øn g·ªçn v√† s√∫c t√≠ch.`;
              
              // T·∫°o messages m·ªõi t·ª´ message g·ªëc
              const fallbackMessages = [
                { role: 'system', content: fallbackSystemPrompt },
                { role: 'user', content: message }
              ];
              
              const openaiHeaders = {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${openaiKey.key}`
              };
              
              const openaiRequestBody = {
                model: openaiModel,
                messages: fallbackMessages,
                temperature: 0.7,
                max_tokens: 500
              };
              
              const openaiResponse = await fetch(openaiUrl, {
                method: 'POST',
                headers: openaiHeaders,
                body: JSON.stringify(openaiRequestBody)
              });
              
              if (openaiResponse.ok) {
                const openaiData = await openaiResponse.json();
                if (openaiData.choices && openaiData.choices[0] && openaiData.choices[0].message) {
                  const openaiAnswer = openaiData.choices[0].message.content;
                  
                  // Ghi log th√†nh c√¥ng cho OpenAI
                  await logApiUsage({
                    tokens_used: openaiData.usage?.total_tokens || 0,
                    request_type: 'chat_completion_fallback',
                    status: 'success',
                    message_content: message.substring(0, 100),
                    provider: 'openai'
                  });
                  
                  // Tr·∫£ v·ªÅ c√¢u tr·∫£ l·ªùi t·ª´ OpenAI
                  return NextResponse.json({ 
                    response: openaiAnswer,
                    source: 'openai',
                    fallback_from: 'deepseek'
                  });
                }
              }
            }
          } catch (fallbackError) {
            console.error('Error using OpenAI as fallback:', fallbackError);
          }
        }
      } catch (fallbackProcessError) {
        console.error('Error in fallback process:', fallbackProcessError);
      }
      
      try {
        await logApiUsage({
          tokens_used: 0,
          request_type: 'chat_completion',
          status: 'error',
          error: apiError instanceof Error ? apiError.message : 'Unknown error',
          message_content: message.substring(0, 100),
          provider: 'unknown'
        });
        console.log('‚úÖ ƒê√£ ghi log l·ªói API th√†nh c√¥ng');
      } catch (logUsageError) {
        console.error('‚ùå L·ªói khi ghi log l·ªói API:', logUsageError);
      }
      
      // S·ª≠ d·ª•ng fallback response n·∫øu API kh√¥ng ho·∫°t ƒë·ªông
      const randomIndex = Math.floor(Math.random() * FALLBACK_RESPONSES.length);
      const fallbackResponse = FALLBACK_RESPONSES[randomIndex];
      
      if (DEBUG_MODE) console.log('Using fallback response');
      
      // Ghi log khi s·ª≠ d·ª•ng fallback response
      console.log('Ghi log cho fallback response...');
      try {
        await logApiUsage({
          tokens_used: fallbackResponse.length,  // S·ª≠ d·ª•ng ƒë·ªô d√†i c·ªßa c√¢u tr·∫£ l·ªùi l√†m tokens
          request_type: 'fallback_response',
          status: 'success',
          error: apiError instanceof Error ? apiError.message : 'Unknown API error',
          message_content: message.substring(0, 100),
          provider: 'fallback'
        });
        console.log('ƒê√£ ghi log fallback response th√†nh c√¥ng');
      } catch (logError) {
        console.error('L·ªói khi ghi log fallback response:', logError);
      }
      
      return NextResponse.json({ 
        response: fallbackResponse,
        fallback: true,
        source: 'fallback'
      });
    }
  } catch (error) {
    console.error('General error in chat API:', error);
    return NextResponse.json(
      { 
        error: 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu chat', 
        details: error instanceof Error ? error.message : 'Unknown error',
        source: 'error'
      },
      { status: 500 }
    );
  }
} 