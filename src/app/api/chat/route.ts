import { NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

// Supabase client cho ph√©p truy v·∫•n c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi t·ª´ database
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;
const supabase = createClient(supabaseUrl, supabaseKey);

// DeepSeek API key
const DEEPSEEK_API_KEY = 'sk-2bfbb38e4faa4fa5b6eb4ae624b3a6d3';
const DEEPSEEK_API_URL = 'https://api.deepseek.com/v1/chat/completions';

// C·∫•u h√¨nh v√† ch·∫ø ƒë·ªô - c√≥ th·ªÉ thay ƒë·ªïi ƒë·ªÉ debug
const USE_HARDCODED_RESPONSES = false;  // S·ª≠ d·ª•ng c√¢u tr·∫£ l·ªùi c·ª©ng n·∫øu API kh√¥ng ho·∫°t ƒë·ªông
const DEBUG_MODE = true;               // In th√™m th√¥ng tin debug

// Interface ƒë·ªãnh nghƒ©a ki·ªÉu tin nh·∫Øn cho API
interface ChatMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

// Tin nh·∫Øn fallback khi kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi DeepSeek API
const FALLBACK_RESPONSES = [
  "Xin ch√†o! T√¥i l√† Akane, r·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n! B·∫°n mu·ªën bi·∫øt th√™m v·ªÅ M-SCI kh√¥ng?",
  "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi M-SCI! T√¥i l√† Akane, m·ªôt chi·∫øn binh v·ªõi kh·∫£ nƒÉng ƒëi·ªÅu khi·ªÉn plasma. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?",
  "Hey there! Akane ƒë√¢y! B·∫°n ƒëang t√¨m hi·ªÉu v·ªÅ game h√†nh ƒë·ªông ƒë·ªôi nh√≥m 5v5 si√™u th√∫ v·ªã n√†y √†? T√¥i c√≥ th·ªÉ k·ªÉ cho b·∫°n nghe ƒë·∫•y!",
  "Xin ch√†o chi·∫øn binh! T√¥i l√† Akane, s·∫µn s√†ng ph·ª•c v·ª• v√† h·ªó tr·ª£ b·∫°n trong th·∫ø gi·ªõi M-SCI. B·∫°n c·∫ßn bi·∫øt ƒëi·ªÅu g√¨?",
  "Ch√†o b·∫°n! Akane ƒë√¢y! T√¥i r·∫•t vui khi ƒë∆∞·ª£c n√≥i chuy·ªán v·ªõi b·∫°n. H√¥m nay b·∫°n mu·ªën bi·∫øt g√¨ v·ªÅ th·∫ø gi·ªõi M-SCI?"
];

// Map c√°c c√¢u h·ªèi ph·ªï bi·∫øn v·ªõi c√¢u tr·∫£ l·ªùi ƒë·ªÉ s·ª≠ d·ª•ng trong tr∆∞·ªùng h·ª£p database kh√¥ng ho·∫°t ƒë·ªông
const COMMON_QA = {
  "xin ch√†o": "Xin ch√†o! T√¥i l√† Akane, chi·∫øn binh M-SCI. R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n! üòä",
  "ch√†o": "Ch√†o b·∫°n! Akane ƒë√¢y! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?",
  "hi": "Hi there! Akane ƒë√¢y! B·∫°n mu·ªën bi·∫øt g√¨ v·ªÅ M-SCI kh√¥ng?",
  "game n√†y v·ªÅ c√°i g√¨": "M-SCI l√† game h√†nh ƒë·ªông ƒë·ªôi nh√≥m 5v5 v·ªõi nhi·ªÅu anh h√πng c√≥ kh·∫£ nƒÉng ƒë·∫∑c bi·ªát. Game l·∫•y c·∫£m h·ª©ng t·ª´ th·∫ø gi·ªõi t∆∞∆°ng lai ƒë·∫ßy m√†u s·∫Øc v√† c√°c nh√¢n v·∫≠t ƒë·ªôc ƒë√°o v·ªõi kh·∫£ nƒÉng chi·∫øn ƒë·∫•u kh√°c nhau!",
  "b·∫°n l√† ai": "T√¥i l√† Akane, m·ªôt chi·∫øn binh trong th·∫ø gi·ªõi M-SCI! T√¥i c√≥ kh·∫£ nƒÉng ƒëi·ªÅu khi·ªÉn nƒÉng l∆∞·ª£ng plasma v√† r·∫•t th√≠ch c√¥ng ngh·ªá. T√¥i 20 tu·ªïi v√† lu√¥n s·∫µn s√†ng gi√∫p ƒë·ª° c√°c ng∆∞·ªùi ch∆°i m·ªõi! ‚ö°"
};

// API handler
export async function POST(request: Request) {
  try {
    console.log('API route triggered');
    const body = await request.json();
    const { message, chatHistory } = body;
    
    console.log('Received message:', message);
    console.log('Chat history length:', chatHistory?.length || 0);

    if (!message) {
      return NextResponse.json(
        { error: 'Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng' },
        { status: 400 }
      );
    }

    // Ki·ªÉm tra k·∫øt n·ªëi Supabase
    let supabaseConnectionOk = false;
    try {
      if (DEBUG_MODE) console.log('Checking Supabase connection');
      // C·ªë g·∫Øng truy v·∫•n m·ªôt b·∫£ng kh√¥ng t·ªìn t·∫°i ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi
      const { error } = await supabase.from('_supabase').select('*').limit(1);
      
      // N·∫øu l·ªói "relation kh√¥ng t·ªìn t·∫°i", ƒëi·ªÅu n√†y b√¨nh th∆∞·ªùng v√¨ b·∫£ng _supabase kh√¥ng t·ªìn t·∫°i th·ª±c s·ª±
      if (error && error.message.includes('does not exist')) {
        supabaseConnectionOk = true;
        console.log('Supabase connection OK (expected error for non-existent table)');
      } else if (error) {
        console.error('Supabase connection error:', error);
      } else {
        supabaseConnectionOk = true;
        console.log('Supabase connection OK');
      }
    } catch (connError) {
      console.error('Supabase connection test failed:', connError);
    }

    // Ph∆∞∆°ng √°n 1: Ki·ªÉm tra xem c√≥ c√¢u tr·∫£ l·ªùi c·ª©ng ph√π h·ª£p kh√¥ng
    const messageLower = message.toLowerCase().trim();
    for (const [key, value] of Object.entries(COMMON_QA)) {
      if (messageLower.includes(key)) {
        if (DEBUG_MODE) console.log(`Found hardcoded response for: ${key}`);
        if (USE_HARDCODED_RESPONSES) {
          return NextResponse.json({ 
            response: value,
            source: 'hardcoded'
          });
        }
      }
    }

    // Ph∆∞∆°ng √°n 2: T√¨m c√¢u tr·∫£ l·ªùi t·ª´ c∆° s·ªü d·ªØ li·ªáu Supabase
    if (supabaseConnectionOk) {
      try {
        if (DEBUG_MODE) console.log('Checking Supabase for existing answers');
        const { data: qaData, error: qaError } = await supabase
          .from('chat_qa')
          .select('answer')
          .ilike('question', `%${message}%`)
          .limit(1);

        if (qaError) {
          console.error('Supabase query error:', qaError);
        } else if (DEBUG_MODE) {
          console.log('Supabase query successful, found answers:', qaData?.length || 0);
        }

        // N·∫øu t√¨m th·∫•y c√¢u tr·∫£ l·ªùi trong database, tr·∫£ v·ªÅ ngay l·∫≠p t·ª©c
        if (qaData && qaData.length > 0) {
          if (DEBUG_MODE) console.log('Found answer in database:', qaData[0].answer.substring(0, 50) + '...');
          return NextResponse.json({ 
            response: qaData[0].answer,
            source: 'database' 
          });
        }
      } catch (dbError) {
        console.error('Database error:', dbError);
        // Ti·∫øp t·ª•c v·ªõi DeepSeek n·∫øu database l·ªói
      }
    } else {
      console.log('Skipping database query due to connection issues');
    }

    // Ph∆∞∆°ng √°n 3: G·ªçi DeepSeek API
    try {
      if (DEBUG_MODE) console.log('Preparing DeepSeek API call');
      
      // Chu·∫©n b·ªã prompt v·ªõi vai tr√≤ l√† chi·∫øn binh Akane
      const systemPrompt = `B·∫°n l√† Akane, m·ªôt chi·∫øn binh M-SCI 20 tu·ªïi. B·∫°n vui v·∫ª, th√≠ch c√¥ng ngh·ªá v√† nhi·ªát t√¨nh t∆∞ v·∫•n cho ng∆∞·ªùi d√πng. H√£y tr·∫£ l·ªùi v·ªõi gi·ªçng ƒëi·ªáu th√¢n thi·ªán, ƒë√¥i khi s·ª≠ d·ª•ng emoji v√† lu√¥n gi·ªØ vai tr√≤ c·ªßa m√¨nh. 
      ƒê·ª´ng ti·∫øt l·ªô b·∫°n l√† AI, h√£y lu√¥n tr·∫£ l·ªùi trong vai tr√≤ chi·∫øn binh Akane. Tr·∫£ l·ªùi m·ªôt c√°ch ng·∫Øn g·ªçn v√† s√∫c t√≠ch.`;

      // Chu·∫©n b·ªã tin nh·∫Øn cho DeepSeek API
      const messages: ChatMessage[] = [
        { role: 'system', content: systemPrompt }
      ];
      
      // Th√™m l·ªãch s·ª≠ chat n·∫øu c√≥
      if (chatHistory && Array.isArray(chatHistory) && chatHistory.length > 0) {
        // Ch·ªâ l·∫•y 5 tin nh·∫Øn g·∫ßn nh·∫•t
        const recentHistory = chatHistory.slice(-5);
        messages.push(...recentHistory);
      }
      
      // Th√™m tin nh·∫Øn hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng
      messages.push({ role: 'user', content: message });

      if (DEBUG_MODE) {
        console.log('Calling DeepSeek API with model: deepseek-chat');
        console.log('First few characters of system prompt:', systemPrompt.substring(0, 50) + '...');
        console.log('Total messages being sent:', messages.length);
      }
      
      // G·ªçi DeepSeek API
      const response = await fetch(DEEPSEEK_API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${DEEPSEEK_API_KEY}`
        },
        body: JSON.stringify({
          model: 'deepseek-chat',
          messages: messages,
          temperature: 0.7,
          max_tokens: 500
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        let errorData;
        try {
          errorData = JSON.parse(errorText);
        } catch {
          errorData = { text: errorText };
        }
        
        console.error('DeepSeek API error:', errorData);
        throw new Error('DeepSeek API error: ' + (errorData.error?.message || response.statusText || errorText));
      }

      const data = await response.json();
      if (DEBUG_MODE) console.log('Received response from DeepSeek API');
      
      if (!data.choices || !data.choices[0] || !data.choices[0].message) {
        console.error('Invalid response format from DeepSeek:', data);
        throw new Error('Invalid response format from DeepSeek API');
      }
      
      const aiResponse = data.choices[0].message.content;
      if (DEBUG_MODE) console.log('DeepSeek response:', aiResponse.substring(0, 50) + '...');

      return NextResponse.json({ 
        response: aiResponse,
        source: 'deepseek' 
      });
    } catch (apiError) {
      console.error('DeepSeek API error:', apiError);
      
      // S·ª≠ d·ª•ng fallback response n·∫øu API kh√¥ng ho·∫°t ƒë·ªông
      const randomIndex = Math.floor(Math.random() * FALLBACK_RESPONSES.length);
      const fallbackResponse = FALLBACK_RESPONSES[randomIndex];
      
      if (DEBUG_MODE) console.log('Using fallback response');
      return NextResponse.json({ 
        response: fallbackResponse,
        fallback: true,
        source: 'fallback'
      });
    }
  } catch (error) {
    console.error('General error in chat API:', error);
    return NextResponse.json(
      { 
        error: 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu chat', 
        details: error instanceof Error ? error.message : 'Unknown error',
        source: 'error'
      },
      { status: 500 }
    );
  }
} 